name: Validate module.json

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure module.json exists
        run: |
          if [ ! -f module.json ]; then
            echo "module.json not found at repo root."
            exit 1
          fi

      - name: Validate JSON syntax
        run: jq empty module.json

      - name: Validate required keys and values
        shell: bash
        env:
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          # Required top-level keys
          REQUIRED=( "id" "title" "version" "compatibility" )
          for key in "${REQUIRED[@]}"; do
            if [ "$(jq -r --arg k "$key" 'has($k)' module.json)" != "true" ]; then
              echo "::error::Missing required key: $key"
              exit 1
            fi
          done

          VERSION="$(jq -r '.version' module.json)"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9\.-]+)?$ ]]; then
            echo "::error::version must be SemVer (e.g., 1.2.3 or 1.2.3-beta). Found: $VERSION"
            exit 1
          fi

          # Expected URLs for this repo
          EXPECT_MANIFEST="https://github.com/${REPO}/releases/latest/download/module.json"
          EXPECT_DOWNLOAD="https://github.com/${REPO}/releases/latest/download/chat-pruner.zip"

          MANIFEST="$(jq -r '.manifest // empty' module.json)"
          DOWNLOAD="$(jq -r '.download // empty' module.json)"

          if [ -z "$MANIFEST" ] || [ -z "$DOWNLOAD" ]; then
            echo "::error::manifest and/or download missing in module.json"
            exit 1
          fi

          MATCH_MANIFEST="OK"
          MATCH_DOWNLOAD="OK"
          if [ "$MANIFEST" != "$EXPECT_MANIFEST" ]; then
            MATCH_MANIFEST="MISMATCH"
          fi
          if [ "$DOWNLOAD" != "$EXPECT_DOWNLOAD" ]; then
            MATCH_DOWNLOAD="MISMATCH"
          fi

          # Compact console log (easy to read in job logs)
          echo "----- module.json validation (compact) -----"
          echo "Repository: ${REPO}"
          echo "Ref:       ${{ github.ref_name }}"
          echo "id:        $(jq -r '.id' module.json)"
          echo "title:     $(jq -r '.title' module.json)"
          echo "version:   ${VERSION}"
          echo "compat:    min=$(jq -r '.compatibility.minimum // "(missing)"' module.json), verified=$(jq -r '.compatibility.verified // "(missing)"' module.json)"
          echo "manifest:  ${MANIFEST}  [${MATCH_MANIFEST}]"
          echo "download:  ${DOWNLOAD}  [${MATCH_DOWNLOAD}]"
          echo "-------------------------------------------"

          # Fail on mismatched URLs
          if [ "$MATCH_MANIFEST" = "MISMATCH" ] || [ "$MATCH_DOWNLOAD" = "MISMATCH" ]; then
            echo "::error::One or more URLs do not match expected releases/latest endpoints for ${REPO}"
            echo "Expected manifest: ${EXPECT_MANIFEST}"
            echo "Expected download: ${EXPECT_DOWNLOAD}"
            exit 1
          fi

      - name: Write summary
        shell: bash
        env:
          REPO: ${{ github.repository }}
        run: |
          ID="$(jq -r '.id // "(missing)"' module.json)"
          TITLE="$(jq -r '.title // "(missing)"' module.json)"
          VERSION="$(jq -r '.version // "(missing)"' module.json)"
          COMP_MIN="$(jq -r '.compatibility.minimum // "(missing)"' module.json)"
          COMP_VER="$(jq -r '.compatibility.verified // "(missing)"' module.json)"
          MANIFEST="$(jq -r '.manifest // "(missing)"' module.json)"
          DOWNLOAD="$(jq -r '.download // "(missing)"' module.json)"
          EXPECT_MANIFEST="https://github.com/${REPO}/releases/latest/download/module.json"
          EXPECT_DOWNLOAD="https://github.com/${REPO}/releases/latest/download/chat-pruner.zip"

          STATUS_MANIFEST="✅ matches expected"
          STATUS_DOWNLOAD="✅ matches expected"
          if [ "$MANIFEST" != "$EXPECT_MANIFEST" ]; then STATUS_MANIFEST="❌ expected: ${EXPECT_MANIFEST}"; fi
          if [ "$DOWNLOAD" != "$EXPECT_DOWNLOAD" ]; then STATUS_DOWNLOAD="❌ expected: ${EXPECT_DOWNLOAD}"; fi

          {
            echo "### module.json validation summary"
            echo ""
            echo "- **Repository:** \`${REPO}\`"
            echo "- **Ref:** \`${{ github.ref_name }}\`"
            echo ""
            echo "**Basics**"
            echo ""
            echo "- id: \`${ID}\`"
            echo "- title: \`${TITLE}\`"
            echo "- version: \`${VERSION}\`"
            echo "- compatibility.minimum: \`${COMP_MIN}\`"
            echo "- compatibility.verified: \`${COMP_VER}\`"
            echo ""
            echo "**URLs**"
            echo ""
            echo "- manifest: ${MANIFEST}  (${STATUS_MANIFEST})"
            echo "- download: ${DOWNLOAD}  (${STATUS_DOWNLOAD})"
            echo ""
            echo "_All checks completed successfully._"
          } >> "$GITHUB_STEP_SUMMARY"
