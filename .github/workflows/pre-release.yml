name: Publish Pre-Release (Chat Pruner)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Module version (e.g. 1.3.2)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-and-pre-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # removed noisy context echo step

      - name: Ensure jq & zip are available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip

      - name: Validate module.json presence
        run: |
          test -f module.json || (echo "module.json not found at repo root." && exit 1)

      - name: Rewrite module.json (version, manifest, download)
        shell: bash
        run: |
          set -euo pipefail
          REPO="${GITHUB_REPOSITORY}"                 # owner/repo
          VERSION="${{ inputs.version }}"             # e.g. 1.3.2
          TAG="v${{ inputs.version }}"                # prerelease tag includes leading 'v'

          MANIFEST_URL="https://github.com/${REPO}/releases/download/${TAG}/module.json"
          DOWNLOAD_URL="https://github.com/${REPO}/releases/download/${TAG}/chat-pruner.zip"

          cp module.json module.json.bak

          jq --arg v "$VERSION" \
             --arg manifest "$MANIFEST_URL" \
             --arg download "$DOWNLOAD_URL" \
             '
             .version = $v
             | .manifest = $manifest
             | .download = $download
             ' module.json > module.json.tmp

          mv module.json.tmp module.json

          echo "Updated module.json to version ${VERSION}:"
          cat module.json

      # removed committing back to main; prerelease artifacts only

      - name: Build ZIP (chat-pruner.zip)
        shell: bash
        run: |
          set -euo pipefail
          ZIPNAME="chat-pruner.zip"
          rm -f "$ZIPNAME"
          # Create a clean ZIP with module files at the root.
          zip -r "$ZIPNAME" . \
            -x ".git/*" \
               ".github/*" \
               ".gitignore" \
               "docs/*" \
               ".DS_Store"
          [ -f "$ZIPNAME" ] || (echo "ZIP was not produced." && exit 1)
          echo "ZIP contents:"
          unzip -l "$ZIPNAME"

      - name: Verify release assets exist
        run: |
          test -f chat-pruner.zip || (echo "chat-pruner.zip missing"; exit 1)
          test -f module.json || (echo "module.json missing"; exit 1)

      - name: Build release notes (include manifest URL code block)
        run: |
          REPO="${GITHUB_REPOSITORY}"
          TAG="v${{ inputs.version }}"
          MANIFEST_URL="https://github.com/${REPO}/releases/download/${TAG}/module.json"
          {
            echo "Automated pre-release for testing."
            echo
            echo "Version: \`${TAG}\`"
            echo
            echo "### Pre-release manifest URL"
            echo
            echo '```txt'
            echo "${MANIFEST_URL}"
            echo '```'
          } > release_body.md

      - name: Create/Update GitHub Pre-Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version }}
          name: v${{ inputs.version }}
          target_commitish: ${{ github.sha }}
          prerelease: true
          draft: false
          generate_release_notes: false
          body_path: release_body.md
          files: |
            chat-pruner.zip
            module.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
